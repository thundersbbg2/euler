Problemde ilk 1 / i, 1 < i < 1000 sayı içerisinde virgülden sonra devir sayısı en çok olan i değeri isteniyor. Bunun için gerçek hayatta elle çözdüğümüz bölme işlemlerinde uyguladığımız işlemleri yapacağız. İçine gönderilen sayının virgülden sonraki devreden basamak sayısını geri döndüren "recurring_cycle" fonksiyonunu oluşturalım.

Fonksiyen içerisinde "control" değişkeni true olduğu sürece çalışan bir do-while döngüsü kullanılsın. "control" değişkeninin ilk değeri true olsun. Bölme işleminin virgülden sonraki kısmını "result" isminde string bir değişkende tutalım. "remainder" her adımda bulunan kalanı, "remainders" bağlı listesinde ise bulunan kalanları tutalım. "remainders" bağlı listesinin ilk elemanını 1 yapalım, çünkü "1 mod i" 1'e eşittir. Bölünecek sayı, yani 1'i "divided" değişkeninde depolayalım.

Koşulu "control" olan do-while döngüsüne girildiğinde "divided" 10 ile çarpılsın, çünkü bölme işlemi yaparken kalan sayı 0 değilse 10 ile çarpılır ve tekrar bölen'e bölünür. İçeride bir while döngüsünde "divided" "i"den küçük olduğu sürece "divided" değişkenini 10 ile çarpalım ve "result" string değişkeninin sonuna 0 ekleyelim. Döngüden çıktıktan sonra "remainder" değişkenine "divided mod i" değerini atayalım. "result" değişkeninin sonuna "divided / i" tam sayı bölmesininin sonucunu ekleyelim ve "divided" değişkenine "remainder" değerini atayalım. Eğer "remainders" bağlı listesi "remainder" değerini içeriyorsa "control" ifadesini false yapalım, eğer içermiyorsa "remainders" bağlı listesine "remainder" değerini ekleyelim ve "remainder" 0 ise "control" değişkenini false yapalım. Bu döngü kalan 0 ya da daha önce karşılaşılan bir kalan bulunana kadar dönecektir.

Döngüden çıkıldığında fonksiyon eğer "remainder" 0 ise 0, değilse "result" string ifadesinin karakter sayısı ile "remainders" bağlı listesinde "remainder" değerinin indisi farkını döndürür. Örneğin 1/6, 1.666... devreden değerine sahiptir, döngüden çıkıldığında "result" ifadesinin uzunluğu 2 olacaktır, "remainder" ise 4'tür. "remainder" ifadesinin bağlı listedeki yeri, yani ilk geçtiği yerin indisi ise 1'dir. (İndislerin 0'dan başladığı kabul edilmiştir.) Burada string uzunluğu 2, indis 1 olduğuna göre 2-1 = 1 devir sayısına sahiptir.
